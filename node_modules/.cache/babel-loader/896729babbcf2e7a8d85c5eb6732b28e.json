{"ast":null,"code":"var _jsxFileName = \"/Users/leo/Desktop/Show-Pin-on-Map/src/components/Select.jsx\";\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport '.src/App.css';\nimport { Formik, Form as FormikForm, validateYupSchema } from 'formik';\nimport * as Yup from 'yup';\nimport { Form, FormGroup, Label, Input, FormFeedback, Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst areas = [{\n  name: '選択してください',\n  value: '選択してください'\n}, {\n  name: '関西',\n  value: '関西'\n}, {\n  name: '関東',\n  value: '関東'\n}, {\n  name: 'その他',\n  value: 'その他'\n}];\nconst prefs = [{\n  area: '選択してください',\n  name: '選択してください',\n  value: '選択してください'\n}, {\n  area: '関東',\n  name: '東京',\n  value: '東京'\n}, {\n  area: '関東',\n  name: '千葉',\n  value: '千葉'\n}, {\n  area: '関西',\n  name: '大阪',\n  value: '大阪'\n}, {\n  area: '関西',\n  name: '兵庫',\n  value: '兵庫'\n}, {\n  area: 'その他',\n  name: '北海道',\n  value: '北海道'\n}];\n\nclass Select extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      modalOpen: false,\n      hobbies: []\n    };\n\n    this.handleSubmit1 = values => {\n      alert(JSON.stringify(values));\n    };\n\n    this.handleSubmit2 = values => {\n      alert(JSON.stringify(values));\n    };\n\n    this.handleHobbyAdd = async hobby => {\n      const _hobbies = [...this.state.hobbies];\n\n      _hobbies.push(hobby);\n\n      await this.setState({\n        hobbies: _hobbies\n      });\n      this.handleModalClose();\n    };\n\n    this.handleModalClose = () => {\n      this.setState({\n        modalOpen: false\n      });\n    };\n\n    this.handleModalOpen = () => {\n      this.setState({\n        modalOpen: true\n      });\n    };\n\n    this.handleHobbyDelete = index => {\n      // alert(index);\n      const _hobbies = [...this.state.hobbies];\n\n      _hobbies.splice(index, 1);\n\n      this.setState({\n        hobbies: _hobbies\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"my-5 text-center\",\n        children: \"\\u52D5\\u7684\\u30D5\\u30A9\\u30FC\\u30E0\\u30C6\\u30B9\\u30C8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"my-4\",\n        children: \"\\u30A8\\u30EA\\u30A2\\u9078\\u629E\\u30D5\\u30A9\\u30FC\\u30E0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: {\n          area: '選択してください',\n          pref: '選択してください'\n        },\n        onSubmit: values => this.handleSubmit1(values),\n        validationSchema: Yup.object().shape({\n          area: Yup.string().notOneOf(['選択してください']),\n          pref: Yup.string().notOneOf(['選択してください'])\n        }),\n        children: ({\n          handleSubmit,\n          handleChange,\n          handleBlur,\n          values,\n          errors,\n          touched\n        }) => /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              children: \"\\u30A8\\u30EA\\u30A2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"select\",\n              name: \"area\",\n              value: values.area,\n              onChange: handleChange,\n              onBlur: handleBlur,\n              invalid: Boolean(touched.area && errors.area),\n              children: areas.map((area, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: area.value,\n                children: area.name\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 49\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(FormFeedback, {\n              children: errors.area\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              children: \"\\u90FD\\u9053\\u5E9C\\u770C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"select\",\n              name: \"pref\",\n              value: values.pref,\n              onChange: handleChange,\n              onBlur: handleBlur,\n              invalid: Boolean(touched.pref && errors.pref),\n              children: prefs.filter(pref => pref.area === values.area || pref.area === '選択してください').map((pref, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: pref.value,\n                children: pref.name\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 49\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(FormFeedback, {\n              children: errors.pref\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              color: \"primary\",\n              children: \"\\u767B\\u9332\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"my-4\",\n        children: \"\\u8DA3\\u5473\\u767B\\u9332\\u30D5\\u30A9\\u30FC\\u30E0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Formik, {\n        enableReinitialize: true,\n        initialValues: {\n          name: 'hoge',\n          hobby: '',\n          hobbies: this.state.hobbies\n        },\n        onSubmit: values => this.handleSubmit2(values),\n        validationSchema: Yup.object().shape({\n          name: Yup.string().required(),\n          hobbies: Yup.array().min(1)\n        }),\n        children: ({\n          handleSubmit,\n          handleBlur,\n          handleChange,\n          values,\n          errors,\n          touched,\n          validateField,\n          setFieldValue\n        }) => /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"\\u6C0F\\u540D\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"text\",\n              name: \"name\",\n              value: values.name,\n              onChange: handleChange,\n              onBlur: handleBlur,\n              invalid: Boolean(touched.name && errors.name)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(FormFeedback, {\n              children: errors.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n            children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n              className: \"col-form-label\",\n              children: \"\\u8DA3\\u5473\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                type: \"button\",\n                size: \"sm\",\n                color: \"success\",\n                onClick: () => {\n                  // setFieldValue('hobby', '');\n                  this.handleModalOpen();\n                },\n                children: \"\\u8DA3\\u5473\\u3092\\u8FFD\\u52A0 +\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 167,\n                columnNumber: 41\n              }, this), this.state.hobbies.map((hobby, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"row container\",\n                children: [/*#__PURE__*/_jsxDEV(Input, {\n                  type: \"text\",\n                  value: hobby,\n                  disabled: true,\n                  className: \"col-11 my-3\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 174,\n                  columnNumber: 53\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  className: \"col-1 my-3 px-1\",\n                  type: \"button\",\n                  onClick: () => this.handleHobbyDelete(index),\n                  children: \"X\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 180,\n                  columnNumber: 53\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 173,\n                columnNumber: 49\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-danger\",\n              children: /*#__PURE__*/_jsxDEV(\"small\", {\n                children: touched.hobbies && errors.hobbies ? errors.hobbies : null\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 189,\n                columnNumber: 64\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Modal, {\n            isOpen: this.state.modalOpen,\n            children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n              toggle: this.handleModalClose,\n              children: \"\\u8DA3\\u5473\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n              children: /*#__PURE__*/_jsxDEV(FormGroup, {\n                children: [/*#__PURE__*/_jsxDEV(Label, {\n                  children: \"\\u8DA3\\u5473\\u540D\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 196,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(Input, {\n                  type: \"text\",\n                  name: \"hobby\",\n                  value: values.hobby,\n                  onChange: handleChange,\n                  onBlur: handleBlur,\n                  invalid: Boolean(touched.hobby && errors.hobby)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 197,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(FormFeedback, {\n                  children: errors.hobby\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 205,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 195,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                type: \"button\",\n                color: \"info\",\n                onClick: () => {\n                  // validateField('name');\n                  // validateField('hobby');\n                  // なぜかvalidateFieldがエラーになる。。。\n                  if (values.hobby === '') {\n                    alert(\"必須です。\");\n                    return;\n                  }\n\n                  this.handleHobbyAdd(values.hobby);\n                },\n                children: \"\\u767B\\u9332\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 209,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                type: \"button\",\n                color: \"secondary\",\n                onClick: this.handleModalClose,\n                children: \"\\u30AD\\u30E3\\u30F3\\u30BB\\u30EB\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 219,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              type: \"submit\",\n              color: \"primary\",\n              children: \"\\u767B\\u9332\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Select;","map":{"version":3,"sources":["/Users/leo/Desktop/Show-Pin-on-Map/src/components/Select.jsx"],"names":["React","Formik","Form","FormikForm","validateYupSchema","Yup","FormGroup","Label","Input","FormFeedback","Button","Modal","ModalHeader","ModalBody","ModalFooter","areas","name","value","prefs","area","Select","Component","state","modalOpen","hobbies","handleSubmit1","values","alert","JSON","stringify","handleSubmit2","handleHobbyAdd","hobby","_hobbies","push","setState","handleModalClose","handleModalOpen","handleHobbyDelete","index","splice","render","pref","object","shape","string","notOneOf","handleSubmit","handleChange","handleBlur","errors","touched","Boolean","map","filter","required","array","min","validateField","setFieldValue"],"mappings":"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","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport '.src/App.css';\n\nimport { Formik, Form as FormikForm, validateYupSchema } from 'formik';\nimport * as Yup from 'yup';\nimport {\n    Form,\n    FormGroup,\n    Label,\n    Input,\n    FormFeedback,\n    Button,\n    Modal,\n    ModalHeader,\n    ModalBody,\n    ModalFooter\n} from 'reactstrap';\n\n\nconst areas = [\n    { name: '選択してください', value: '選択してください' },\n    { name: '関西', value: '関西' },\n    { name: '関東', value: '関東' },\n    { name: 'その他', value: 'その他' },\n];\n\nconst prefs = [\n    { area: '選択してください', name: '選択してください', value: '選択してください' },\n    { area: '関東', name: '東京', value: '東京' },\n    { area: '関東', name: '千葉', value: '千葉' },\n    { area: '関西', name: '大阪', value: '大阪' },\n    { area: '関西', name: '兵庫', value: '兵庫' },\n    { area: 'その他', name: '北海道', value: '北海道' },\n]\n\nclass Select extends React.Component {\n\n    state = {\n        modalOpen: false,\n        hobbies: [],\n    }\n\n    handleSubmit1 = (values) => {\n        alert(JSON.stringify(values));\n    }\n\n    handleSubmit2 = (values) => {\n        alert(JSON.stringify(values));\n    }\n\n    handleHobbyAdd = async (hobby) => {\n        const _hobbies = [...this.state.hobbies];\n        _hobbies.push(hobby);\n        await this.setState({ hobbies: _hobbies });\n        this.handleModalClose();\n    }\n\n    handleModalClose = () => {\n        this.setState({\n            modalOpen: false,\n        });\n    }\n\n    handleModalOpen = () => {\n        this.setState({\n            modalOpen: true,\n        });\n    }\n\n    handleHobbyDelete = (index) => {\n        // alert(index);\n        const _hobbies = [...this.state.hobbies];\n        _hobbies.splice(index, 1);\n        this.setState({ hobbies: _hobbies });\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <h3 className=\"my-5 text-center\">動的フォームテスト</h3>\n                <h4 className=\"my-4\">エリア選択フォーム</h4>\n                <Formik\n                    initialValues={{ area: '選択してください', pref: '選択してください' }}\n                    onSubmit={(values) => this.handleSubmit1(values)}\n                    validationSchema={Yup.object().shape({\n                        area: Yup.string().notOneOf(['選択してください']),\n                        pref: Yup.string().notOneOf(['選択してください']),\n                    })}\n                >\n                    {\n                        ({ handleSubmit, handleChange, handleBlur, values, errors, touched }) => (\n                            <Form onSubmit={handleSubmit}>\n                                <FormGroup>\n                                    <Label>エリア</Label>\n                                    <Input\n                                        type=\"select\"\n                                        name=\"area\"\n                                        value={values.area}\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        invalid={Boolean(touched.area && errors.area)}\n                                    >\n                                        {\n                                            areas.map((area, index) => (\n                                                <option value={area.value} key={index}>{area.name}</option>\n                                            ))\n                                        }\n                                    </Input>\n                                    <FormFeedback>{errors.area}</FormFeedback>\n                                </FormGroup>\n                                <FormGroup>\n                                    <Label>都道府県</Label>\n                                    <Input\n                                        type=\"select\"\n                                        name=\"pref\"\n                                        value={values.pref}\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        invalid={Boolean(touched.pref && errors.pref)}\n                                    >\n                                        {\n                                            (prefs.filter(pref => pref.area === values.area || pref.area === '選択してください')).map((pref, index) => (\n                                                <option value={pref.value} key={index}>{pref.name}</option>\n                                            ))\n                                        }\n                                    </Input>\n                                    <FormFeedback>{errors.pref}</FormFeedback>\n                                </FormGroup>\n                                <div>\n                                    <Button type=\"submit\" color=\"primary\">登録</Button>\n                                </div>\n                            </Form>\n                        )\n                    }\n                </Formik>\n                <h4 className=\"my-4\">趣味登録フォーム</h4>\n                <Formik\n                    enableReinitialize\n                    initialValues={{ name: 'hoge', hobby: '', hobbies: this.state.hobbies }}\n                    onSubmit={values => this.handleSubmit2(values)}\n                    validationSchema={Yup.object().shape({\n                        name: Yup.string().required(),\n                        hobbies: Yup.array().min(1),\n                    })}\n                >\n                    {\n                        ({ handleSubmit, handleBlur, handleChange, values, errors, touched, validateField, setFieldValue }) => (\n                            <Form onSubmit={handleSubmit}>\n                                <FormGroup>\n                                    <label>氏名</label>\n                                    <Input\n                                        type=\"text\"\n                                        name=\"name\"\n                                        value={values.name}\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        invalid={Boolean(touched.name && errors.name)}\n                                    />\n                                    <FormFeedback>\n                                        {errors.name}\n                                    </FormFeedback>\n                                </FormGroup>\n                                <FormGroup>\n                                    <legend className=\"col-form-label\">趣味</legend>\n                                    <div>\n                                        <Button type=\"button\" size=\"sm\" color=\"success\" onClick={() => {\n                                            // setFieldValue('hobby', '');\n                                            this.handleModalOpen();\n                                        }}>趣味を追加 +</Button>\n                                        {\n                                            this.state.hobbies.map((hobby, index) => (\n                                                <div className=\"row container\" key={index}>\n                                                    <Input\n                                                        type=\"text\"\n                                                        value={hobby}\n                                                        disabled\n                                                        className=\"col-11 my-3\"\n                                                    />\n                                                    <Button\n                                                        className=\"col-1 my-3 px-1\"\n                                                        type=\"button\"\n                                                        onClick={() => this.handleHobbyDelete(index)}\n                                                    >X</Button>\n                                                </div>\n                                            ))\n                                        }\n                                    </div>\n                                    <p className=\"text-danger\"><small>{touched.hobbies && errors.hobbies ? errors.hobbies : null}</small></p>\n                                </FormGroup>\n\n                                <Modal isOpen={this.state.modalOpen}>\n                                    <ModalHeader toggle={this.handleModalClose}>趣味</ModalHeader>\n                                    <ModalBody>\n                                        <FormGroup>\n                                            <Label>趣味名</Label>\n                                            <Input\n                                                type=\"text\"\n                                                name=\"hobby\"\n                                                value={values.hobby}\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                invalid={Boolean(touched.hobby && errors.hobby)}\n                                            />\n                                            <FormFeedback>{errors.hobby}</FormFeedback>\n                                        </FormGroup>\n                                    </ModalBody>\n                                    <ModalFooter>\n                                        <Button type=\"button\" color=\"info\" onClick={() => {\n                                            // validateField('name');\n                                            // validateField('hobby');\n                                            // なぜかvalidateFieldがエラーになる。。。\n                                            if (values.hobby === '') {\n                                                alert(\"必須です。\")\n                                                return;\n                                            }\n                                            this.handleHobbyAdd(values.hobby);\n                                        }}>登録</Button>\n                                        <Button type=\"button\" color=\"secondary\" onClick={this.handleModalClose}>キャンセル</Button>\n                                    </ModalFooter>\n                                </Modal>\n\n                                <div>\n                                    <Button type=\"submit\" type=\"submit\" color=\"primary\">登録</Button>\n                                </div>\n                            </Form>\n                        )\n                    }\n                </Formik>\n            </div>\n        );\n    }\n}\n\nexport default Select;"]},"metadata":{},"sourceType":"module"}