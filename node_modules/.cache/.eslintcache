[{"/Users/leo/Desktop/Show-Pin-on-Map/src/index.js":"1","/Users/leo/Desktop/Show-Pin-on-Map/src/App.js":"2","/Users/leo/Desktop/Show-Pin-on-Map/src/reportWebVitals.js":"3","/Users/leo/Desktop/Show-Pin-on-Map/src/components/Map.jsx":"4","/Users/leo/Desktop/Show-Pin-on-Map/src/components/Select.jsx":"5","/Users/leo/Desktop/Show-Pin-on-Map/src/components/prefectures.ts":"6","/Users/leo/Desktop/Show-Pin-on-Map/src/components/test.jsx":"7"},{"size":457,"mtime":1631090715286,"results":"8","hashOfConfig":"9"},{"size":2750,"mtime":1631511059911,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1631070339498,"results":"11","hashOfConfig":"9"},{"size":2061,"mtime":1631716323525,"results":"12","hashOfConfig":"9"},{"size":7100,"mtime":1631761995002,"results":"13","hashOfConfig":"9"},{"size":2672,"mtime":1631275968874,"results":"14","hashOfConfig":"9"},{"size":8095,"mtime":1631498191056,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"17yf1jk",{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"18"},"/Users/leo/Desktop/Show-Pin-on-Map/src/index.js",[],["33","34"],"/Users/leo/Desktop/Show-Pin-on-Map/src/App.js",["35"],"import React, { Component } from 'react';\nimport './App.css';\nimport Select from './components/Select';\n//import Map from \"./components/Map\";\n//import Select from './components/Select';\nimport Test from './components/test'\n//import GeoCode from './components/GeoCode';\n\nclass App extends Component{\n  prefecture = {\n    options: [\n      {label: \"北海道\", value: \"hokkaido\" },\n      {label: \"青森県\", value: \"aomori\" },\n      {label: \"岩手県\", value: \"iwate\" },\n      {label: \"宮城県\", value: \"miyagi\" },\n      {label: \"秋田県\", value: \"akita\" },\n      {label: \"山形県\", value: \"yamagata\" },\n      {label: \"福島県\", value: \"fukushima\" },\n      {label: \"茨城県\", value: \"ibaraki\" },\n      {label: \"栃木県\", value: \"tochigi\" },\n      {label: \"群馬県\", value: \"gunma\" },\n      {label: \"埼玉県\", value: \"saitama\" },\n      {label: \"千葉県\", value: \"chiba\" },\n      {label: \"東京都\", value: \"tokyo\" },\n      {label: \"神奈川県\", value: \"kanagawa\" },\n      {label: \"新潟県\", value: \"niigata\" },\n      {label: \"富山県\", value: \"toyama\" },\n      {label: \"石川県\", value: \"ishikawa\" },\n      {label: \"福井県\", value: \"fukui\" },\n      {label: \"山梨県\", value: \"yamanashi\" },\n      {label: \"長野県\", value: \"nagano\" },\n      {label: \"岐阜県\", value: \"gifu\" },\n      {label: \"静岡県\", value: \"shizuoka\" },\n      {label: \"愛知県\", value: \"aichi\" },\n      {label: \"三重県\", value: \"mie\" },\n      {label: \"滋賀県\", value: \"shiga\" },\n      {label: \"京都府\", value: \"kyoto\" },\n      {label: \"大阪府\", value: \"osaka\" },\n      {label: \"兵庫県\", value: \"hyogo\" },\n      {label: \"奈良県\", value: \"nara\" },\n      {label: \"和歌山県\", value: \"wakayama\" },\n      {label: \"鳥取県\", value: \"tottori\" },\n      {label: \"島根県\", value: \"shimane\" },\n      {label: \"岡山県\", value: \"okayama\" },\n      {label: \"広島県\", value: \"hiroshima\" },\n      {label: \"山口県\", value: \"yamaguchi\" },\n      {label: \"徳島県\", value: \"tokushima\" },\n      {label: \"香川県\", value: \"kagawa\" },\n      {label: \"愛媛県\", value: \"ehime\" },\n      {label: \"高知県\", value: \"kochi\" },\n      {label: \"福岡県\", value: \"fukuoka\" },\n      {label: \"佐賀県\", value: \"saga\" },\n      {label: \"長崎県\", value: \"nagasaki\" },\n      {label: \"熊本県\", value: \"kumamoto\" },\n      {label: \"大分県\", value: \"oita\" },\n      {label: \"宮崎県\", value: \"miyazaki\" },\n      {label: \"鹿児島県\", value: \"kagoshima\" },\n      {label: \"沖縄県\", value: \"okinawa\" }\n    ]\n  };\n\n  render(){\n      return(\n        <React.Fragment>\n <Select/>\n        {/* <Map location = \"東京都渋谷区道玄坂1丁目16-6 二葉ビル3階\"/>, */}\n        </React.Fragment>\n      );\n  }\n}\n\nexport default App;","/Users/leo/Desktop/Show-Pin-on-Map/src/reportWebVitals.js",[],"/Users/leo/Desktop/Show-Pin-on-Map/src/components/Map.jsx",[],"/Users/leo/Desktop/Show-Pin-on-Map/src/components/Select.jsx",["36","37","38","39","40","41","42","43"],"/Users/leo/Desktop/Show-Pin-on-Map/src/components/prefectures.ts",[],"/Users/leo/Desktop/Show-Pin-on-Map/src/components/test.jsx",["44"],"import React from 'react'\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\nimport Autocomplete from 'react-google-autocomplete';\nimport Geocode from \"react-geocode\";\nGeocode.setApiKey(\"AIzaSyDGe5vjL8wBmilLzoJ0jNIwe9SAuH2xS_0\");\nGeocode.enableDebug();\n\nconst apiKey = \"AIzaSyDD_EyIVFiO-R51XzLDqZlF5824t3KFaAg\";\n\nclass Test extends React.Component{\nconstructor( props ){\n  super( props );\n  this.state = {\n   address: '',\n   city: '',\n   area: '',\n   state: '',\n   mapPosition: {\n    lat: this.props.center.lat,\n    lng: this.props.center.lng\n   },\n   markerPosition: {\n    lat: this.props.center.lat,\n    lng: this.props.center.lng\n}\n  }\n }\n/**\n  * Get the current address from the default map position and set those values in the state\n  */\n componentDidMount() {\n  Geocode.fromLatLng( this.state.mapPosition.lat , this.state.mapPosition.lng ).then(\n   response => {\n    const address = response.results[0].formatted_address,\n     addressArray =  response.results[0].address_components,\n     city = this.getCity( addressArray ),\n     area = this.getArea( addressArray ),\n     state = this.getState( addressArray );\n  \n    console.log( 'city', city, area, state );\n  \n    this.setState( {\n     address: ( address ) ? address : '',\n     area: ( area ) ? area : '',\n     city: ( city ) ? city : '',\n     state: ( state ) ? state : '',\n    } )\n   },\n   error => {\n    console.error(error);\n   }\n  );\n };\n/**\n  * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\n  *\n  * @param nextProps\n  * @param nextState\n  * @return {boolean}\n  */\n shouldComponentUpdate( nextProps, nextState ){\n  if (\n   this.state.markerPosition.lat !== this.props.center.lat ||\n   this.state.address !== nextState.address ||\n   this.state.city !== nextState.city ||\n   this.state.area !== nextState.area ||\n   this.state.state !== nextState.state\n  ) {\n   return true\n  } else if ( this.props.center.lat === nextProps.center.lat ){\n   return false\n  }\n }\n/**\n  * Get the city and set the city input value to the one selected\n  *\n  * @param addressArray\n  * @return {string}\n  */\n getCity = ( addressArray ) => {\n  let city = '';\n  for( let i = 0; i < addressArray.length; i++ ) {\n   if ( addressArray[ i ].types[0] && 'administrative_area_level_2' === addressArray[ i ].types[0] ) {\n    city = addressArray[ i ].long_name;\n    return city;\n   }\n  }\n };\n/**\n  * Get the area and set the area input value to the one selected\n  *\n  * @param addressArray\n  * @return {string}\n  */\n getArea = ( addressArray ) => {\n  let area = '';\n  for( let i = 0; i < addressArray.length; i++ ) {\n   if ( addressArray[ i ].types[0]  ) {\n    for ( let j = 0; j < addressArray[ i ].types.length; j++ ) {\n     if ( 'sublocality_level_1' === addressArray[ i ].types[j] || 'locality' === addressArray[ i ].types[j] ) {\n      area = addressArray[ i ].long_name;\n      return area;\n     }\n    }\n   }\n  }\n };\n/**\n  * Get the address and set the address input value to the one selected\n  *\n  * @param addressArray\n  * @return {string}\n  */\n getState = ( addressArray ) => {\n  let state = '';\n  for( let i = 0; i < addressArray.length; i++ ) {\n   for( let i = 0; i < addressArray.length; i++ ) {\n    if ( addressArray[ i ].types[0] && 'administrative_area_level_1' === addressArray[ i ].types[0] ) {\n     state = addressArray[ i ].long_name;\n     return state;\n    }\n   }\n  }\n };\n/**\n  * And function for city,state and address input\n  * @param event\n  */\n onChange = ( event ) => {\n  this.setState({ [event.target.name]: event.target.value });\n };\n/**\n  * This Event triggers when the marker window is closed\n  *\n  * @param event\n  */\n onInfoWindowClose = ( event ) => {\n};\n/**\n  * When the user types an address in the search box\n  * @param place\n  */\n onPlaceSelected = ( place ) => {\nconst address = place.formatted_address,\n   addressArray =  place.address_components,\n   city = this.getCity( addressArray ),\n   area = this.getArea( addressArray ),\n   state = this.getState( addressArray ),\n   latValue = place.geometry.location.lat(),\n   lngValue = place.geometry.location.lng();\n// Set these values in the state.\n  this.setState({\n   address: ( address ) ? address : '',\n   area: ( area ) ? area : '',\n   city: ( city ) ? city : '',\n   state: ( state ) ? state : '',\n   markerPosition: {\n    lat: latValue,\n    lng: lngValue\n   },\n   mapPosition: {\n    lat: latValue,\n    lng: lngValue\n   },\n  })\n };\n/**\n  * When the marker is dragged you get the lat and long using the functions available from event object.\n  * Use geocode to get the address, city, area and state from the lat and lng positions.\n  * And then set those values in the state.\n  *\n  * @param event\n  */\n onMarkerDragEnd = ( event ) => {\n  console.log( 'event', event );\n  let newLat = event.latLng.lat(),\n   newLng = event.latLng.lng(),\n   addressArray = [];\nGeocode.fromLatLng( newLat , newLng ).then(\n   response => {\n    const address = response.results[0].formatted_address,\n     addressArray =  response.results[0].address_components,\n     city = this.getCity( addressArray ),\n     area = this.getArea( addressArray ),\n     state = this.getState( addressArray );\nthis.setState( {\n     address: ( address ) ? address : '',\n     area: ( area ) ? area : '',\n     city: ( city ) ? city : '',\n     state: ( state ) ? state : ''\n    } )\n   },\n   error => {\n    console.error(error);\n   }\n  );\n };\nrender(){\nconst AsyncMap = withScriptjs(\n   withGoogleMap(\n    props => (\n     <GoogleMap google={this.props.google}\n      defaultZoom={this.props.zoom}\n      defaultCenter={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\n     >\n      {/* For Auto complete Search Box */}\n      <Autocomplete\n       style={{\n        width: '100%',\n        height: '40px',\n        paddingLeft: '16px',\n        marginTop: '2px',\n        marginBottom: '100px'\n       }}\n       onPlaceSelected={ this.onPlaceSelected }\n       types={['(regions)']}\n      />\n{/*Marker*/}\n      <Marker google={this.props.google}\n       name={'Dolores park'}\n          draggable={true}\n          onDragEnd={ this.onMarkerDragEnd }\n             position={{ lat: this.state.markerPosition.lat, lng: this.state.markerPosition.lng }}\n      />\n      <Marker />\n{/* InfoWindow on top of marker */}\n      <InfoWindow\n       onClose={this.onInfoWindowClose}\n       position={{ lat: ( this.state.markerPosition.lat + 0.0018 ), lng: this.state.markerPosition.lng }}\n      >\n       <div>\n        <span style={{ padding: 0, margin: 0 }}>{ this.state.address }</span>\n       </div>\n      </InfoWindow>\n</GoogleMap>\n)\n   )\n  );\nlet map;\n  if( this.props.center.lat !== undefined ) {\n   map = <div>\n     <div>\n      <div className=\"form-group\">\n       <label htmlFor=\"\">City</label>\n       <input type=\"text\" name=\"city\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.city }/>\n      </div>\n      <div className=\"form-group\">\n       <label htmlFor=\"\">Area</label>\n       <input type=\"text\" name=\"area\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.area }/>\n      </div>\n      <div className=\"form-group\">\n       <label htmlFor=\"\">State</label>\n       <input type=\"text\" name=\"state\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.state }/>\n      </div>\n      <div className=\"form-group\">\n       <label htmlFor=\"\">Address</label>\n       <input type=\"text\" name=\"address\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.address }/>\n      </div>\n     </div>\n     <AsyncMap\n      googleMapURL={`https://maps.googleapis.com/maps/api/js?key=${apiKey}&v=3.exp&libraries=geometry,drawing,places`}\n      loadingElement={\n       <div style={{ height: `100%` }} />\n      }\n      containerElement={\n       <div style={{ height: this.props.height }} />\n      }\n      mapElement={\n       <div style={{ height: `100%` }} />\n      }\n     />\n    </div>\n} else {\n   map = <div style={{height: this.props.height}} />\n  }\n  return( map )\n }\n}\nexport default Test",{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":6,"column":8,"nodeType":"51","messageId":"52","endLine":6,"endColumn":12},{"ruleId":"49","severity":1,"message":"53","line":4,"column":10,"nodeType":"51","messageId":"52","endLine":4,"endColumn":18},{"ruleId":"49","severity":1,"message":"54","line":5,"column":8,"nodeType":"51","messageId":"52","endLine":5,"endColumn":15},{"ruleId":"55","severity":1,"message":"56","line":37,"column":5,"nodeType":"57","messageId":"58","endLine":37,"endColumn":15},{"ruleId":"55","severity":1,"message":"56","line":44,"column":5,"nodeType":"57","messageId":"58","endLine":44,"endColumn":15},{"ruleId":"55","severity":1,"message":"56","line":45,"column":5,"nodeType":"57","messageId":"58","endLine":45,"endColumn":15},{"ruleId":"55","severity":1,"message":"56","line":46,"column":5,"nodeType":"57","messageId":"58","endLine":46,"endColumn":15},{"ruleId":"55","severity":1,"message":"56","line":47,"column":5,"nodeType":"57","messageId":"58","endLine":47,"endColumn":15},{"ruleId":"49","severity":1,"message":"59","line":84,"column":11,"nodeType":"51","messageId":"52","endLine":84,"endColumn":17},{"ruleId":"49","severity":1,"message":"60","line":178,"column":4,"nodeType":"51","messageId":"52","endLine":178,"endColumn":16},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"no-unused-vars","'Test' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'Geocode' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","noDirectMutation","'toSend' is assigned a value but never used.","'addressArray' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]